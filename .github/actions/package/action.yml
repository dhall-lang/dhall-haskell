name: 'Package a Cabal package into an archive'
description: 'Package assets for a Cabal package'
inputs:
  cabal-name:
    description: 'Name of the Cabal package'
    required: true
  package-file:
    description: 'Override the filename of the GitHub package'
    required: false
    default: ''
  architecture:
    description: 'Override architecture'
    required: false
    default: ''
  os:
    description: 'Override OS'
    required: false
    default: ''
  file-extension:
    description: 'Override the file extension of the package file'
    required: false
    default: 'tar.bz2'
  assets:
    description: 'Files to include in the package'
    required: false
    default: ''
  archive-command:
    description: 'Archive command to use'
    required: false
    default: 'tar -jcvf'
outputs:
  package-file:
    description: "Output path of the package"
    value: ${{ steps.get-package-file.outputs.value }}
  architecture:
    description: "Architecture used for packaging"
    value: ${{ steps.get-architecture.outputs.value }}
  os:
    description: "OS used for packaging"
    value: ${{ steps.get-os.outputs.value }}
runs:
  using: "composite"
  steps:
    - id: get-architecture
      shell: bash
      run: |
        value="$(uname -m)"
        if [[ -n "${{ inputs.architecture }}" ]]; then
          value="${{ inputs.architecture }}"
        fi
        echo "::set-output name=value::${value}"
    - id: get-os
      shell: bash
      run: |
        value="${{ runner.os }}"
        if [[ -n "${{ inputs.os }}" ]]; then
          value="${{ inputs.os }}"
        fi
        echo "::set-output name=value::${value}"
    - id: get-package-file
      shell: bash
      run: |
        version="$(stack query locals "${{ inputs.cabal-name }}" version)"
        value="${{ inputs.cabal-name }}-${version}-${{ steps.get-architecture.outputs.value }}-${{ steps.get-os.outputs.value }}.${{ inputs.file-extension }}"
        if [[ -n "${{ inputs.package-file }}" ]]; then
          value="${{ inputs.package-file }}"
        fi
        echo "::set-output name=value::${value}"
    - shell: bash
      run: ${{ inputs.archive-command }} "${{ steps.get-package-file.outputs.value }}" ${{ inputs.assets }}
